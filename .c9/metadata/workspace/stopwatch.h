{"filter":false,"title":"stopwatch.h","tooltip":"/stopwatch.h","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":74,"column":6},"action":"insert","lines":["/*","    Copyright (c) 2012 Martin Sustrik  All rights reserved.","","    Permission is hereby granted, free of charge, to any person obtaining a copy","    of this software and associated documentation files (the \"Software\"),","    to deal in the Software without restriction, including without limitation","    the rights to use, copy, modify, merge, publish, distribute, sublicense,","    and/or sell copies of the Software, and to permit persons to whom","    the Software is furnished to do so, subject to the following conditions:","","    The above copyright notice and this permission notice shall be included","    in all copies or substantial portions of the Software.","","    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL","    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING","    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS","    IN THE SOFTWARE.","*/","","#include \"stopwatch.h\"","","#if defined NN_HAVE_WINDOWS","","#include \"win.h\"","","void nn_stopwatch_init (struct nn_stopwatch *self)","{","    LARGE_INTEGER time;","","    QueryPerformanceCounter (&time);","    self->start = (uint64_t) (time.QuadPart);","}","","uint64_t nn_stopwatch_term (struct nn_stopwatch *self)","{","    LARGE_INTEGER tps;","    LARGE_INTEGER time;","","    QueryPerformanceFrequency (&tps);","    QueryPerformanceCounter (&time);","    return (uint64_t) ((time.QuadPart - self->start) * 1000000 / tps.QuadPart);","}","","#else","","#include <stdlib.h>","#include <assert.h>","#include <sys/time.h>","","void nn_stopwatch_init (struct nn_stopwatch *self)","{","    int rc;","    struct timeval tv;","","    rc = gettimeofday (&tv, NULL);","    assert (rc == 0);","    self->start = (uint64_t) (((uint64_t) tv.tv_sec) * 1000000 + tv.tv_usec);","}","","uint64_t nn_stopwatch_term (struct nn_stopwatch *self)","{","    int rc;","    struct timeval tv;","    uint64_t end;","","    rc = gettimeofday (&tv, NULL);","    assert (rc == 0);","    end = (uint64_t) (((uint64_t) tv.tv_sec) * 1000000 + tv.tv_usec);","    return end - self->start;","}","","#endif"],"id":1}],[{"start":{"row":74,"column":6},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":75,"column":0},"end":{"row":76,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":76,"column":0},"end":{"row":77,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":77,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":79,"column":0},"end":{"row":128,"column":6},"action":"insert","lines":["/*","    Copyright (c) 2012 Martin Sustrik  All rights reserved.","    Copyright 2015 Garrett D'Amore <garrett@damore.org>","","    Permission is hereby granted, free of charge, to any person obtaining a copy","    of this software and associated documentation files (the \"Software\"),","    to deal in the Software without restriction, including without limitation","    the rights to use, copy, modify, merge, publish, distribute, sublicense,","    and/or sell copies of the Software, and to permit persons to whom","    the Software is furnished to do so, subject to the following conditions:","","    The above copyright notice and this permission notice shall be included","    in all copies or substantial portions of the Software.","","    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL","    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING","    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS","    IN THE SOFTWARE.","*/","","#ifndef NN_STOPWATCH_INCLUDED","#define NN_STOPWATCH_INCLUDED","","#include <stdint.h>","","#include \"err.h\"","","/*  Check whether measured time is the expected time (in microseconds).","    The upper tolerance is 50ms so that the test doesn't fail even on","    very slow or very loaded systems.  Likewise on some systems we can","    wind up firing up to a single tick early (Windows), so the lower bound","    is pretty low.  The consequence of this is that programs which  specify","    a timeout should be a little more pessimistic (at least 10ms) then they","    might otherwise think they need to be. */","#define time_assert(actual,expected) \\","    nn_assert (actual > ((expected) - 10000) && actual < ((expected) + 50000)); ","","/*  Measures time interval in microseconds. */","","struct nn_stopwatch {","    uint64_t start;","};","","void nn_stopwatch_init (struct nn_stopwatch *self);","uint64_t nn_stopwatch_term (struct nn_stopwatch *self);","","#endif"],"id":7}],[{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"remove","lines":["/*","    Copyright (c) 2012 Martin Sustrik  All rights reserved.","","    Permission is hereby granted, free of charge, to any person obtaining a copy","    of this software and associated documentation files (the \"Software\"),","    to deal in the Software without restriction, including without limitation","    the rights to use, copy, modify, merge, publish, distribute, sublicense,","    and/or sell copies of the Software, and to permit persons to whom","    the Software is furnished to do so, subject to the following conditions:","","    The above copyright notice and this permission notice shall be included","    in all copies or substantial portions of the Software.","","    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR","    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,","    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL","    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER","    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING","    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS","    IN THE SOFTWARE.","*/","","#include \"stopwatch.h\"","","#if defined NN_HAVE_WINDOWS","","#include \"win.h\"","","void nn_stopwatch_init (struct nn_stopwatch *self)","{","    LARGE_INTEGER time;","","    QueryPerformanceCounter (&time);","    self->start = (uint64_t) (time.QuadPart);","}","","uint64_t nn_stopwatch_term (struct nn_stopwatch *self)","{","    LARGE_INTEGER tps;","    LARGE_INTEGER time;","","    QueryPerformanceFrequency (&tps);","    QueryPerformanceCounter (&time);","    return (uint64_t) ((time.QuadPart - self->start) * 1000000 / tps.QuadPart);","}","","#else","","#include <stdlib.h>","#include <assert.h>","#include <sys/time.h>","","void nn_stopwatch_init (struct nn_stopwatch *self)","{","    int rc;","    struct timeval tv;","","    rc = gettimeofday (&tv, NULL);","    assert (rc == 0);","    self->start = (uint64_t) (((uint64_t) tv.tv_sec) * 1000000 + tv.tv_usec);","}","","uint64_t nn_stopwatch_term (struct nn_stopwatch *self)","{","    int rc;","    struct timeval tv;","    uint64_t end;","","    rc = gettimeofday (&tv, NULL);","    assert (rc == 0);","    end = (uint64_t) (((uint64_t) tv.tv_sec) * 1000000 + tv.tv_usec);","    return end - self->start;","}","","#endif",""],"id":8}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":9}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":12}]]},"ace":{"folds":[],"scrolltop":368.5,"scrollleft":0,"selection":{"start":{"row":46,"column":0},"end":{"row":47,"column":55},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":56,"mode":"ace/mode/c_cpp"}},"timestamp":1463943459068,"hash":"469b388b397b4080e7baa8e14baffa8aa8c6a2a0"}